# This is a basic workflow to help you get started with Actions

name: Trigger another github Wf using token

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      #----------------------------------------
      #- uses: actions/setup-python@v4
      #  if: ${{ inputs.python_runtime }}
      #  with:
      #    python-version: "${{ inputs.python_runtime }}"

      # Runs a set of commands using the runners shell
      - name: get and trigger a wf.
        shell: python
        run: |
          import requests
          import json
          
          def get_github_wf ():
            # Set the repository and event type for the webhook
            repository = "dev"
            event_type = "repo"
        
            api_endpoint = "https://api.github.com/repos/prakash9760/Test/actions/workflows"
        
            data = '{"ref":"master"}'
            headers = {
            "Accept": "application/vnd.github.v3+json",
            "Authorization": f"Bearer ${{ secrets.PRAKASH9760_PAT }}"
            }        
        
            # Send a POST request to create the webhook
            response = requests.get(api_endpoint, headers=headers, data=data)
            print(response)
        
            # Check the response
            if (response.status_code == 201 or response.status_code == 200 ):
                print("Webhook created successfully!")
            else:
                print(f"Failed to get github actions. Status code: {response.status_code}, Response: {response.text}")
                
          def trigger_github_wf ():
            # Set the repository and event type for the webhook
            repository = "dev"
            event_type = "repo"
            owner = "prakash9760"
            github_repo = "Test"
            branch_name = "master"
            workflow_name = "main.yml"
        
            api_endpoint = f"https://api.github.com/repos/{owner}/{github_repo}/actions/workflows/{workflow_name}/dispatches"
        
            data = '{"ref":"master"}'
            headers = {
            "Accept": "application/vnd.github.v3+json",
            "Authorization": f"Bearer ${{ secrets.PRAKASH9760_PAT }}"
            }
            
            # Send a POST request to create the webhook
            response = requests.post(api_endpoint, headers=headers, data=data)
            print(response)
        
            # Check the response
            if (response.status_code == 201 or response.status_code == 204 ):
                print("successfully!")
            else:
                print(f"Failed to trigger wf. Status code: {response.status_code}, Response: {response.text}")

          get_github_wf()
          trigger_github_wf()
